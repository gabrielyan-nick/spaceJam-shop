generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  googleId     String    @unique @default("")
  email        String    @unique
  password     String    @default("")
  name         String    @default("")
  phone        String    @default("")
  avatarPath   String    @default("/uploads/avatar.png") @map("avatar_path")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  orders       Order[]
  reviews      Review[]
  favorites    Product[] @relation(fields: [favoritesIds], references: [id])
  favoritesIds String[]  @map("favorites_id") @db.ObjectId
}

model Product {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String      @unique
  slug            String      @unique
  description     String
  price           Int
  images          String[]
  characteristics Json
  category        Category?   @relation(fields: [categoryId], references: [id])
  categoryId      String?     @map("category_id") @db.ObjectId
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  orderItems      OrderItem[]
  reviews         Review[]
  users           User[]      @relation(fields: [userIds], references: [id])
  userIds         String[]    @map("user_id") @db.ObjectId
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  rating    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id") @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Order {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  status    EnumOrderStatus @default(PENDING)
  items     OrderItem[]
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @map("user_id") @db.ObjectId
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  price     Int
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @map("order_id") @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("Order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
